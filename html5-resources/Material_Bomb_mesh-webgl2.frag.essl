#version 300 es
precision mediump float;
precision highp int;

uniform highp sampler2D cake_tex;
uniform highp vec4 shirr[7];
uniform highp float envmapStrength;
uniform highp vec3 sunDir;
uniform bool receiveShadow;
uniform highp sampler2DShadow shadowMap;
uniform highp float shadowsBias;
uniform highp vec3 sunCol;

in highp vec3 wnormal;
in highp vec3 eyeDir;
in highp vec2 texCoord;
in highp vec4 lightPosition;
out highp vec4 fragColor[1];

highp vec3 surfaceAlbedo(highp vec3 baseColor, highp float metalness)
{
    return mix(baseColor, vec3(0.0), vec3(metalness));
}

highp vec3 surfaceF0(highp vec3 baseColor, highp float metalness)
{
    return mix(vec3(0.039999999105930328369140625), baseColor, vec3(metalness));
}

highp vec3 shIrradiance(highp vec3 nor, highp vec4 shirr_1[7])
{
    highp vec3 cl00 = vec3(shirr_1[0].x, shirr_1[0].y, shirr_1[0].z);
    highp vec3 cl1m1 = vec3(shirr_1[0].w, shirr_1[1].x, shirr_1[1].y);
    highp vec3 cl10 = vec3(shirr_1[1].z, shirr_1[1].w, shirr_1[2].x);
    highp vec3 cl11 = vec3(shirr_1[2].y, shirr_1[2].z, shirr_1[2].w);
    highp vec3 cl2m2 = vec3(shirr_1[3].x, shirr_1[3].y, shirr_1[3].z);
    highp vec3 cl2m1 = vec3(shirr_1[3].w, shirr_1[4].x, shirr_1[4].y);
    highp vec3 cl20 = vec3(shirr_1[4].z, shirr_1[4].w, shirr_1[5].x);
    highp vec3 cl21 = vec3(shirr_1[5].y, shirr_1[5].z, shirr_1[5].w);
    highp vec3 cl22 = vec3(shirr_1[6].x, shirr_1[6].y, shirr_1[6].z);
    return ((((((((((cl22 * 0.429042994976043701171875) * ((nor.y * nor.y) - ((-nor.z) * (-nor.z)))) + (((cl20 * 0.743125021457672119140625) * nor.x) * nor.x)) + (cl00 * 0.88622701168060302734375)) - (cl20 * 0.2477079927921295166015625)) + (((cl2m2 * 0.85808598995208740234375) * nor.y) * (-nor.z))) + (((cl21 * 0.85808598995208740234375) * nor.y) * nor.x)) + (((cl2m1 * 0.85808598995208740234375) * (-nor.z)) * nor.x)) + ((cl11 * 1.02332794666290283203125) * nor.y)) + ((cl1m1 * 1.02332794666290283203125) * (-nor.z))) + ((cl10 * 1.02332794666290283203125) * nor.x);
}

highp float PCF(highp sampler2DShadow shadowMap_1, highp vec2 uv, highp float compare, highp vec2 smSize)
{
    highp vec3 _166 = vec3(uv + (vec2(-1.0) / smSize), compare);
    highp float result = texture(shadowMap_1, vec3(_166.xy, _166.z));
    highp vec3 _175 = vec3(uv + (vec2(-1.0, 0.0) / smSize), compare);
    result += texture(shadowMap_1, vec3(_175.xy, _175.z));
    highp vec3 _186 = vec3(uv + (vec2(-1.0, 1.0) / smSize), compare);
    result += texture(shadowMap_1, vec3(_186.xy, _186.z));
    highp vec3 _197 = vec3(uv + (vec2(0.0, -1.0) / smSize), compare);
    result += texture(shadowMap_1, vec3(_197.xy, _197.z));
    highp vec3 _205 = vec3(uv, compare);
    result += texture(shadowMap_1, vec3(_205.xy, _205.z));
    highp vec3 _216 = vec3(uv + (vec2(0.0, 1.0) / smSize), compare);
    result += texture(shadowMap_1, vec3(_216.xy, _216.z));
    highp vec3 _227 = vec3(uv + (vec2(1.0, -1.0) / smSize), compare);
    result += texture(shadowMap_1, vec3(_227.xy, _227.z));
    highp vec3 _238 = vec3(uv + (vec2(1.0, 0.0) / smSize), compare);
    result += texture(shadowMap_1, vec3(_238.xy, _238.z));
    highp vec3 _249 = vec3(uv + (vec2(1.0) / smSize), compare);
    result += texture(shadowMap_1, vec3(_249.xy, _249.z));
    return result / 9.0;
}

highp vec3 lambertDiffuseBRDF(highp vec3 albedo, highp float nl)
{
    return albedo * nl;
}

highp float d_ggx(highp float nh, highp float a)
{
    highp float a2 = a * a;
    highp float denom = ((nh * nh) * (a2 - 1.0)) + 1.0;
    denom = max(denom * denom, 6.103515625e-05);
    return (a2 * 0.3183098733425140380859375) / denom;
}

highp float g2_approx(highp float NdotL, highp float NdotV, highp float alpha)
{
    highp vec2 helper = (vec2(NdotL, NdotV) * 2.0) * (vec2(1.0) / ((vec2(NdotL, NdotV) * (2.0 - alpha)) + vec2(alpha)));
    return max(helper.x * helper.y, 0.0);
}

highp vec3 f_schlick(highp vec3 f0, highp float vh)
{
    return f0 + ((vec3(1.0) - f0) * exp2((((-5.554729938507080078125) * vh) - 6.9831600189208984375) * vh));
}

highp vec3 specularBRDF(highp vec3 f0, highp float roughness, highp float nl, highp float nh, highp float nv, highp float vh)
{
    highp float a = roughness * roughness;
    return (f_schlick(f0, vh) * (d_ggx(nh, a) * g2_approx(nl, nv, a))) / vec3(max(4.0 * nv, 9.9999997473787516355514526367188e-06));
}

highp vec3 tonemapFilmic(highp vec3 color)
{
    highp vec3 x = max(vec3(0.0), color - vec3(0.0040000001899898052215576171875));
    return (x * ((x * 6.19999980926513671875) + vec3(0.5))) / ((x * ((x * 6.19999980926513671875) + vec3(1.7000000476837158203125))) + vec3(0.0599999986588954925537109375));
}

void main()
{
    highp vec3 n = normalize(wnormal);
    highp vec3 vVec = normalize(eyeDir);
    highp float dotNV = max(dot(n, vVec), 0.0);
    highp vec4 cake_tex_texread_store = texture(cake_tex, texCoord);
    highp vec3 _442 = pow(cake_tex_texread_store.xyz, vec3(2.2000000476837158203125));
    cake_tex_texread_store = vec4(_442.x, _442.y, _442.z, cake_tex_texread_store.w);
    highp float ior = 1.4500000476837158203125;
    highp vec3 cake_tex_Color_res = cake_tex_texread_store.xyz;
    highp float cake_tex_Alpha_res = cake_tex_texread_store.w;
    highp vec3 basecol = cake_tex_Color_res * 1.0;
    highp float roughness = 0.100000001490116119384765625;
    highp float metallic = 0.0;
    highp float occlusion = 1.0;
    highp float specular = 1.0;
    highp vec3 emissionCol = vec3(0.0);
    highp float opacity = cake_tex_Alpha_res;
    ior = 1.4500000476837158203125;
    if (opacity < 0.99989998340606689453125)
    {
        discard;
    }
    highp vec3 albedo = surfaceAlbedo(basecol, metallic);
    highp vec3 f0 = surfaceF0(basecol, metallic);
    highp vec3 indirect = shIrradiance(n, shirr);
    indirect *= albedo;
    indirect *= occlusion;
    indirect *= envmapStrength;
    highp vec3 direct = vec3(0.0);
    highp float svisibility = 1.0;
    highp vec3 sh = normalize(vVec + sunDir);
    highp float sdotNL = dot(n, sunDir);
    highp float sdotNH = dot(n, sh);
    highp float sdotVH = dot(vVec, sh);
    if (receiveShadow)
    {
        highp vec3 lPos = lightPosition.xyz / vec3(lightPosition.w);
        svisibility = PCF(shadowMap, lPos.xy, lPos.z - shadowsBias, vec2(1024.0));
    }
    direct += (((lambertDiffuseBRDF(albedo, sdotNL) + (specularBRDF(f0, roughness, sdotNL, sdotNH, dotNV, sdotVH) * specular)) * sunCol) * svisibility);
    fragColor[0] = vec4(direct + indirect, 1.0);
    highp vec3 _578 = tonemapFilmic(fragColor[0].xyz);
    fragColor[0] = vec4(_578.x, _578.y, _578.z, fragColor[0].w);
}

